# WEB

apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: user-management
    tier: web
spec:
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  type: LoadBalancer
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app: user-management
    tier: web
---

apiVersion: v1
kind: ReplicationController
metadata:
 labels:
   name: web
 name: web-controller
spec:
 replicas: 2
 template:
   metadata:
     labels:
       app: user-management
       tier: web
   spec:
     containers:
     - image: eu.gcr.io/kubernetes-testing-1285/groovy-user-management
       name: web
       command: [npm start]
       ports:
       - containerPort: 3000
         name: http-server

---

apiVersion: v1
kind: Deployment
metadata:
  name: web
  # these labels can be applied automatically
  # from the labels in the pod template if not set
  # labels:
    app: user-management
    tier: web
spec:
  # this replicas value is default
  # modify it according to your case
  replicas: 2
  # selector can be applied automatically
  # from the labels in the pod template if not set
  selector:
    matchLabels:
      app: user-management
      tier: web
  template:
    metadata:
      labels:
        app: user-management
        tier: web
    spec:
      containers:
      - name: user-management
        image: eu.gcr.io/kubernetes-testing-1285/groovy-user-management
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below.
          # value: env
        ports:
        - containerPort: 3000
